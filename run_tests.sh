#!/bin/bash

export $(grep -v '^#' '.env.test' | xargs)

# Set the maximum wait time and interval
WAIT_TIMEOUT=90   # Timeout in seconds
CHECK_INTERVAL=3  # Check every 1 second
PRINT_INTERVAL=10  # Print every 5 seconds
elapsed_time=0
print_time=0


# Wait for FastAPI service to be up and running
FASTAPI_HOST="127.0.0.1"  # Set the host of FastAPI
echo "Waiting for FastAPI service to be ready..."
until curl -s "http://$FASTAPI_HOST:$FASTAPI_PORT/docs" > /dev/null; do
  if [ $elapsed_time -ge $WAIT_TIMEOUT ]; then
    echo "Timeout: The app did not become available in $WAIT_TIMEOUT seconds."
    exit 1
  fi
  if [ $print_time -ge $PRINT_INTERVAL ]; then
    echo "Still waiting for the app..."
    print_time=0
  fi
  sleep $CHECK_INTERVAL
  elapsed_time=$((elapsed_time + CHECK_INTERVAL))
  print_time=$((print_time + CHECK_INTERVAL))
done

echo "The app is up - proceeding with the tests..."


echo "Running alembic migrations for environment test using version path 'migrations/test_versions'."
docker-compose -f docker-compose.test.yml exec web-test bash -c "alembic revision --autogenerate -m \"Auto-Generated by Docker entrypoint.sh\" --version-path \"migrations/test_versions\""

echo "Applying database migrations..."
docker-compose -f docker-compose.test.yml exec web-test bash -c "alembic upgrade head"

# Run pytest inside the Docker container for the web service
echo "Running tests with pytest..."
docker-compose -f docker-compose.test.yml exec web-test bash -c "export PYTHONPATH=./ && pytest -s"

# Empty the test database by dropping all tables
echo "Emptying the test database by dropping all tables..."

docker-compose -f docker-compose.test.yml exec db-test bash -c "
psql -U $POSTGRES_USER -d $POSTGRES_DB -c \"
DO \\\$\\\$ 
DECLARE
    r RECORD;
BEGIN
    -- Loop through all tables and drop them
    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP
        EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
    END LOOP;
END 
\\\$\\\$;\"
"


# Delete all test migrations
echo "Deleting all test migrations..."
rm -rf migrations/test_versions/*

echo "Test environment cleaned up successfully."
